{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haviajoe\\\\Desktop\\\\ItunesSearch\\\\ClientApp\\\\itunes-search\\\\src\\\\components\\\\Search.js\";\nimport React, { Component } from 'react';\nimport { Container, Input, Button } from 'reactstrap';\nimport ClipLoader from \"react-spinners/ClipLoader\"; //import SearchItems from './SearchItems'\n\nimport MediaItem from './MediaItem'; //import axios from 'axios';\n\nexport class Searches extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setQuery = event => {\n      this.setState({\n        query: event.target.value\n      });\n    };\n\n    this.search = () => {\n      if (this.state.query) {\n        this.setState({\n          loading: true\n        });\n        fetch(`https://localhost:44383/search/${this.state.query}`, {\n          mode: 'cors'\n        }).then(res => res.json()).then(data => this.setState({\n          items: data.results,\n          loading: false\n        }));\n      } else {\n        alert(\"cant search empty values\");\n      }\n    };\n\n    this.state = {\n      loading: false,\n      items: []\n    };\n  }\n\n  // componentDidMount() {\n  //     this.search();\n  // }\n  componentDidUpdate(prevProps) {\n    if (this.props.location.search !== prevProps.location.search) {\n      this.search();\n    }\n  }\n\n  render() {\n    const {\n      items\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Search Media Here:\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Input, {\n      placeholder: \"Search Here\",\n      onChange: this.setQuery,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.search,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Search\"), React.createElement(ClipLoader, {\n      size: 400,\n      color: \"#123abc\",\n      loading: this.state.loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, items.map(item => React.createElement(MediaItem, {\n      key: item.trackId,\n      item: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/haviajoe/Desktop/ItunesSearch/ClientApp/itunes-search/src/components/Search.js"],"names":["React","Component","Container","Input","Button","ClipLoader","MediaItem","Searches","constructor","props","setQuery","event","setState","query","target","value","search","state","loading","fetch","mode","then","res","json","data","items","results","alert","componentDidUpdate","prevProps","location","render","map","item","trackId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAmBC,KAAnB,EAAyBC,MAAzB,QAAuC,YAAvC;AACA,OAAOC,UAAP,MAAuB,2BAAvB,C,CACA;;AACA,OAAQC,SAAR,MAAwB,aAAxB,C,CAEA;;AAEA,OAAO,MAAMC,QAAN,SAAuBN,SAAvB,CAAiC;AACpCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAQnBC,QARmB,GAQRC,KAAK,IAAI;AAChB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAAtB,OAAd;AACH,KAVkB;;AAAA,SAmBnBC,MAnBmB,GAmBV,MAAM;AACX,UAAG,KAAKC,KAAL,CAAWJ,KAAd,EAAqB;AACjB,aAAKD,QAAL,CAAc;AAACM,UAAAA,OAAO,EAAG;AAAX,SAAd;AACAC,QAAAA,KAAK,CAAE,kCAAiC,KAAKF,KAAL,CAAWJ,KAAM,EAApD,EAAuD;AAAEO,UAAAA,IAAI,EAAE;AAAR,SAAvD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAESG,IAAI,IAAI,KAAKZ,QAAL,CAAc;AAAEa,UAAAA,KAAK,EAAED,IAAI,CAACE,OAAd;AAAsBR,UAAAA,OAAO,EAAE;AAA/B,SAAd,CAFjB;AAGH,OALD,MAMK;AACDS,QAAAA,KAAK,CAAC,0BAAD,CAAL;AACH;AACF,KA7BgB;;AAGf,SAAKV,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KADA;AAETO,MAAAA,KAAK,EAAE;AAFE,KAAb;AAIH;;AAID;AACA;AACA;AACAG,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAI,KAAKpB,KAAL,CAAWqB,QAAX,CAAoBd,MAApB,KAA+Ba,SAAS,CAACC,QAAV,CAAmBd,MAAtD,EAA8D;AAC1D,WAAKA,MAAL;AACH;AACJ;;AAcDe,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEN,MAAAA;AAAF,QAAY,KAAKR,KAAvB;AACJ,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,KAAD;AAAO,MAAA,WAAW,EAAC,aAAnB;AAAkC,MAAA,QAAQ,EAAE,KAAKP,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAE,KAAKM,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,EAQI,oBAAC,UAAD;AACI,MAAA,IAAI,EAAE,GADV;AAEI,MAAA,KAAK,EAAE,SAFX;AAGI,MAAA,OAAO,EAAE,KAAKC,KAAL,CAAWC,OAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CADJ,EAeI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKO,KAAK,CAACO,GAAN,CAAUC,IAAI,IACX,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAEA,IAAI,CAACC,OAArB;AAA8B,MAAA,IAAI,EAAED,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CADL,CAfJ,CADJ;AAsBC;;AAzDmC","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container,Input,Button } from 'reactstrap'\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n//import SearchItems from './SearchItems'\r\nimport  MediaItem  from './MediaItem'\r\n\r\n//import axios from 'axios';\r\n\r\nexport class Searches extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            loading: false,\r\n            items: [],\r\n        };\r\n    }\r\n    setQuery = event => {\r\n        this.setState({ query: event.target.value });\r\n    }\r\n    // componentDidMount() {\r\n    //     this.search();\r\n    // }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.location.search !== prevProps.location.search) {\r\n            this.search()\r\n        }\r\n    }\r\n    search = () => {\r\n        if(this.state.query) {\r\n            this.setState({loading : true});\r\n            fetch(`https://localhost:44383/search/${this.state.query}`, { mode: 'cors' })\r\n              .then(res => res.json())\r\n              .then( data => this.setState({ items: data.results,loading: false }))\r\n        }\r\n        else {\r\n            alert(\"cant search empty values\");\r\n        }\r\n      }\r\n\r\n\r\n    render() {\r\n        const { items } = this.state;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h1>Search Media Here:</h1>\r\n                <br />\r\n                <Input placeholder=\"Search Here\"  onChange={this.setQuery} />\r\n                <br />\r\n                <Button color=\"primary\" onClick={this.search}>\r\n                    Search\r\n                </Button>\r\n                <ClipLoader\r\n                    size={400}\r\n                    color={\"#123abc\"}\r\n                    loading={this.state.loading}\r\n                />\r\n            </div>\r\n            <Container>\r\n                {items.map(item => (\r\n                    <MediaItem key={item.trackId} item={item} />))}\r\n            </Container>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}