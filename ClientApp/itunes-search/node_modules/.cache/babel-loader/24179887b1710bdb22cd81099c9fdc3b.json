{"ast":null,"code":"import { authHeader } from './Helpers/authHeader';\nimport { config } from './Helpers/config';\nexport const userService = {\n  login,\n  logout,\n  register,\n  // getAll,\n  getById,\n  update // delete: _delete\n\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(config.apiUrl + '/account/login', requestOptions).then(handleResponse, handleError).then(user => {\n    // login successful if there's a jwt token in the response\n    if (user && user.token) {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n} // function getAll() {\n//     const requestOptions = {\n//         method: 'GET',\n//         headers: authHeader()\n//     };\n//     return fetch(config.apiUrl + '/users', requestOptions).then(handleResponse, handleError);\n// }\n\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(config.apiUrl + '/account/' + id, requestOptions).then(handleResponse, handleError);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(config.apiUrl + '/account/register', requestOptions).then(handleResponse, handleError);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(config.apiUrl + '/account/' + user.id, requestOptions).then(handleResponse, handleError);\n} // prefixed function name with underscore because delete is a reserved word in javascript\n// function _delete(id) {\n//     const requestOptions = {\n//         method: 'DELETE',\n//         headers: authHeader()\n//     };\n//     return fetch(config.apiUrl + '/users/' + id, requestOptions).then(handleResponse, handleError);\n// }\n\n\nfunction handleResponse(response) {\n  return new Promise((resolve, reject) => {\n    if (response.ok) {\n      // return json if it was returned in the response\n      var contentType = response.headers.get(\"content-type\");\n\n      if (contentType && contentType.includes(\"application/json\")) {\n        response.json().then(json => resolve(json));\n      } else {\n        resolve();\n      }\n    } else {\n      // return error message from response body\n      response.text().then(text => reject(text));\n    }\n  });\n}\n\nfunction handleError(error) {\n  return Promise.reject(error && error.message);\n}","map":{"version":3,"sources":["C:/Users/haviajoe/Desktop/ItunesSearch/ClientApp/itunes-search/src/components/Auth/userServices.js"],"names":["authHeader","config","userService","login","logout","register","getById","update","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","apiUrl","then","handleResponse","handleError","user","token","localStorage","setItem","removeItem","id","response","Promise","resolve","reject","ok","contentType","get","includes","json","text","error","message"],"mappings":"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","sourcesContent":["import { authHeader } from './Helpers/authHeader';\r\nimport { config } from './Helpers/config';\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    // getAll,\r\n    getById,\r\n    update,\r\n    // delete: _delete\r\n};\r\n\r\nfunction login(username, password) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n    };\r\n\r\n    return fetch(config.apiUrl + '/account/login', requestOptions)\r\n        .then(handleResponse, handleError)\r\n        .then(user => {\r\n            // login successful if there's a jwt token in the response\r\n            if (user && user.token) {\r\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            }\r\n\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\n// function getAll() {\r\n//     const requestOptions = {\r\n//         method: 'GET',\r\n//         headers: authHeader()\r\n//     };\r\n\r\n//     return fetch(config.apiUrl + '/users', requestOptions).then(handleResponse, handleError);\r\n// }\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(config.apiUrl + '/account/' + id, requestOptions).then(handleResponse, handleError);\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(config.apiUrl + '/account/register', requestOptions).then(handleResponse, handleError);\r\n}\r\n\r\nfunction update(user) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(config.apiUrl + '/account/' + user.id, requestOptions).then(handleResponse, handleError);\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\n// function _delete(id) {\r\n//     const requestOptions = {\r\n//         method: 'DELETE',\r\n//         headers: authHeader()\r\n//     };\r\n\r\n//     return fetch(config.apiUrl + '/users/' + id, requestOptions).then(handleResponse, handleError);\r\n// }\r\n\r\nfunction handleResponse(response) {\r\n    return new Promise((resolve, reject) => {\r\n        if (response.ok) {\r\n            // return json if it was returned in the response\r\n            var contentType = response.headers.get(\"content-type\");\r\n            if (contentType && contentType.includes(\"application/json\")) {\r\n                response.json().then(json => resolve(json));\r\n            } else {\r\n                resolve();\r\n            }\r\n        } else {\r\n            // return error message from response body\r\n            response.text().then(text => reject(text));\r\n        }\r\n    });\r\n}\r\n\r\nfunction handleError(error) {\r\n    return Promise.reject(error && error.message);\r\n}"]},"metadata":{},"sourceType":"module"}